j <- 1
sapply(cors2, function(x)x[combs[j,1], combs[j,2]])
w %*% sapply(cors2, function(x)x[combs[j,1], combs[j,2]])
uncond.se <- sqrt(uncond.var)#
combs <- t(combn(10,2))#
for(j in 1:nrow(combs)){#
	cormat[combs[j,1], combs[j,2]] <- cormat[combs[j,2], combs[j,1]] <- (w %*% sapply(cors2, function(x)x[combs[j,1], combs[j,2]]))*uncond.se[combs[j,1]]*uncond.se[combs[j,2]] #
}
cormat
combs
cors2
apply(cors2, dim)
sapply(cors2, dim)
j
combs
cormat[combs[j,1], combs[j,2]]
sapply(cors2, function(x)x[combs[j,1], combs[j,2]])
w %*% sapply(cors2, function(x)x[combs[j,1], combs[j,2]])
uncond.se[combs[j,1]]
uncond.se[combs[j,2]]
combs[j,2]
uncond.se
aics <- sapply(res.list, AIC)#
delta <- aics-min(aics)#
w <- exp(-delta/2)/sum(exp(-delta/2))#
#
coefs <- vars <- array(0,dim(ins))#
for(i in 1:4){#
	coefs[i, which(ins[i,] == 1)] <- res.list[[i]]$coef #[-1]#
	vars[i, which(ins[i,] == 1)] <- diag(vcov(res.list[[i]]))#[-1]#
}#
#
theta <- w %*% coefs#
var.2 <- sweep(coefs, 2, theta)^2#
uncond.var <- (w %*% sqrt(vars + var.2))^2#
#
importance <- w %*% ins
coefs <- vars <- array(0,dim(ins)+1)#
for(i in 1:4){#
	coefs[i, which(ins[i,] == 1)] <- res.list[[i]]$coef #[-1]#
	vars[i, which(ins[i,] == 1)] <- diag(vcov(res.list[[i]]))#[-1]#
}#
#
theta <- w %*% coefs#
var.2 <- sweep(coefs, 2, theta)^2#
uncond.var <- (w %*% sqrt(vars + var.2))^2#
#
importance <- w %*% ins
coefs <- vars <- array(0,dim(ins)+1)
coefs
coefs <- vars <- array(0,dim(ins))#
for(i in 1:4){#
	coefs[i, which(ins[i,] == 1)] <- res.list[[i]]$coef[-1]#
	vars[i, which(ins[i,] == 1)] <- diag(vcov(res.list[[i]]))[-1]#
}
coefs
vars
sapply(res.list, function(x)x$coef[1]))
sapply(res.list, function(x)x$coef[1])
coefs <- cbind(sapply(res.list, function(x)x$coef[1]), coefs)
coefs
vars <- cbind(sapply(res.list, function(x)vcov(x)[1,1]), coefs)
vars
rownames(vars) <- rownames(coefs) <- NULL
theta <- w %*% coefs#
var.2 <- sweep(coefs, 2, theta)^2#
uncond.var <- (w %*% sqrt(vars + var.2))^2#
#
importance <- w %*% ins#
#
res <- t(rbind(theta, uncond.var, theta/sqrt(uncond.var), importance))
coefs
theta
var.2 <- sweep(coefs, 2, theta)^2
var.2
uncond.var <- (w %*% sqrt(vars + var.2))^2
dim(vars)
dim(coefs <- vars <- array(0,dim(ins))#
for(i in 1:4){#
	coefs[i, which(ins[i,] == 1)] <- res.list[[i]]$coef[-1]#
	vars[i, which(ins[i,] == 1)] <- diag(vcov(res.list[[i]]))[-1]#
}#
coefs <- cbind(sapply(res.list, function(x)x$coef[1]), coefs)#
vars <- cbind(sapply(res.list, function(x)vcov(x)[1,1]), coefs)#
rownames(vars) <- rownames(coefs) <- NULL#
theta <- w %*% coefs#
var.2 <- sweep(coefs, 2, theta)^2#
uncond.var <- (w %*% sqrt(vars + var.2))^2
coefs <- vars <- array(0,dim(ins))#
for(i in 1:4){#
	coefs[i, which(ins[i,] == 1)] <- res.list[[i]]$coef[-1]#
	vars[i, which(ins[i,] == 1)] <- diag(vcov(res.list[[i]]))[-1]#
}#
coefs <- cbind(sapply(res.list, function(x)x$coef[1]), coefs)#
vars <- cbind(sapply(res.list, function(x)vcov(x)[1,1]), coefs)#
rownames(vars) <- rownames(coefs) <- NULL#
theta <- w %*% coefs#
var.2 <- sweep(coefs, 2, theta)^2#
uncond.var <- (w %*% sqrt(vars + var.2))^2
dim(vars)
dim(var.2
)
dim(coefs)
coefs <- vars <- array(0,dim(ins))#
for(i in 1:4){#
	coefs[i, which(ins[i,] == 1)] <- res.list[[i]]$coef[-1]#
	vars[i, which(ins[i,] == 1)] <- diag(vcov(res.list[[i]]))[-1]#
}#
coefs <- cbind(sapply(res.list, function(x)x$coef[1]), coefs)#
vars <- cbind(sapply(res.list, function(x)vcov(x)[1,1]), vars)#
rownames(vars) <- rownames(coefs) <- NULL#
theta <- w %*% coefs#
var.2 <- sweep(coefs, 2, theta)^2#
uncond.var <- (w %*% sqrt(vars + var.2))^2
importance <- w %*% ins
importance
ins
importance <- w %*% cbind(1, ins)
importance
res <- t(rbind(theta, uncond.var, theta/sqrt(uncond.var), importance))#
rownames(res) <- coef.names#[-1]#
colnames(res) <- c("Coef", "Var", "t", "Importance")
res
uncond.se <- sqrt(uncond.var)#
combs <- t(combn(10,2))#
for(j in 1:nrow(combs)){#
	cormat[combs[j,1], combs[j,2]] <- cormat[combs[j,2], combs[j,1]] <- (w %*% sapply(cors2, function(x)x[combs[j,1], combs[j,2]]))*uncond.se[combs[j,1]]*uncond.se[combs[j,2]] #
}
cormat
solve(cormat)
bmat <- mvrnorm(2500, theta, cormat)
diag(cormat) <- uncond.var
solve(cormat)
cormat
m4
m4a <- c(1, m4)
m4a
X.all <- model.matrix(as.formula("~ pop100 + ngrevpc10k + radiopc + tvpc + primschpc + poly(riots, 2) + poly(agdems, 2)", data=dat))
X.all <- model.matrix(as.formula("~ pop100 + ngrevpc10k + radiopc + tvpc + primschpc + poly(riots, 2) + poly(agdems, 2)", dat))
X.all <- model.matrix(as.formula("democracy ~ pop100 + ngrevpc10k + radiopc + tvpc + primschpc + poly(riots, 2) + poly(agdems, 2)"), data=dat)
names(dat)
X.all <- model.matrix(as.formula("democracy ~ popc100 + ngrevpc10k + radiopc + tvpc + primschpc + poly(riots, 2) + poly(agdems, 2)"), data=dat)
X.all[1,]
meds <- apply(X.all, 2, median)
meds
med.mat <- matrix(meds, nrow=140, ncol=length(mds), byrow=T)
med.mat <- matrix(meds, nrow=140, ncol=length(meds), byrow=T)
meds
med.mat
seq.range <- function(x)seq(min(x), max(x), length=20)
medspoly.r <- poly(dat$riots, 2)#
poly.a <- poly(dat$agdems, 2)
poly.r <- poly(dat$riots, 2)#
poly.a <- poly(dat$agdems, 2)
poly.r
?poly
poly(seq.range(dat$agdems), 2, coefs=attr(poly.r, "coefs"))
med.mat[1:20, 2] <- seq.range(dat$popc100)#
med.mat[21:40, 3] <- seq.range(dat$ngrevpc10k)#
med.mat[41:60, 4] <- seq.range(dat$radiopc)#
med.mat[61:80, 5] <- seq.range(dat$tvpc)#
med.mat[81:100, 6] <- seq.range(dat$primschpc)#
med.mat[101:120, 7:8] <- poly(seq.range(dat$riots), 2, coefs=attr(poly.r, "coefs"))#
med.mat[121:140, 9:10] <- poly(seq.range(dat$agdems), 2, coefs=attr(poly.a, "coefs"))
med.mat
probs <- plogis(med.mat %*% theta)
dim(theta)
length(theta)
dim(med.mat)
probs <- plogis(med.mat %*% t(theta))
probs
seq(1, 140, by=20)
prob.mat <- matrix(probs, nrow=20)
prob.mat
plot(c(0,1), c(1, 20), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F)#
axis(2)#
box()
plot(c(0,1), c(1, 20), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F, type="n")#
axis(2)#
box()
plot(c(1,20), c(0,1), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F, type="n")#
axis(2)#
box()
for(i in 1:ncol(prob.mat)){#
	lines((1:20), prob.mat, col = i)#
}
plot(c(1,20), c(0,1), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F, type="n")#
axis(2)#
box()#
for(i in 1:ncol(prob.mat)){#
	lines((1:20), prob.mat[,i], col = i)#
}
cols <- c("blue", "red", "orange", "brown", "darkgreen", "black", "purple")#
plot(c(1,20), c(0,1), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F, type="n")#
axis(2)#
box()#
for(i in 1:ncol(prob.mat)){#
	lines((1:20), prob.mat[,i], col = cols[i])#
}
var.names
vn <- c(varnames[1:5], c("riots", "agdems"))
vn <- c(var.names[1:5], c("riots", "agdems"))
vn
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, columns = 3 )3
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, columns = 3 )
?legend
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, ncol = 3 )
plot(c(1,20), c(0,1), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F, type="n")#
axis(2)#
box()#
for(i in 1:ncol(prob.mat)){#
	lines((1:20), prob.mat[,i], col = cols[i])#
}#
vn <- c(var.names[1:5], c("riots", "agdems"))#
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, ncol = 3 , box.lty = NULL)
plot(c(1,20), c(0,1), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F, type="n")#
axis(2)#
box()#
for(i in 1:ncol(prob.mat)){#
	lines((1:20), prob.mat[,i], col = cols[i])#
}#
vn <- c(var.names[1:5], c("riots", "agdems"))#
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, ncol = 3 , box.lty = NA)
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, ncol = 3 , box.lty = 0)
plot(c(1,20), c(0,1), xlab = "X-variables (min to max)", ylab = "Predicted Pr(Democracy)", axes=F, type="n")#
axis(2)#
box()#
for(i in 1:ncol(prob.mat)){#
	lines((1:20), prob.mat[,i], col = cols[i])#
}#
vn <- c(var.names[1:5], c("riots", "agdems"))#
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, ncol = 4, box.lty = 0)
legend("bottomleft", vn, lty = rep(1, 7), col = cols, inset=.01, ncol = 4, box.lty = 0, lty=rep(2, 7))
?legend
setwd("~/teach/935_2011/")
Stangle("HW1_answers.Rnw")
cormat
??chol
library(bdsmatrix)
gchol(cormat)
multcomp
help(package=multcomp)
?glht
library(multcomp)
?glht
?cld
install.packages("factorplot", repos="http://www.r-forge.r-project.org")
install.packages("factorplot", repos="http://R-Forge.R-project.org")
?install.packages()
install.packages("factorplot_1.0.tar.gz", repos="http://R-Forge.R-project.org", type="source")
install.packages("factorplot_1.0.tar.gz", contriburl = "https://r-forge.r-project.org/src/contrib/", type="source")
install.packages("factorplot_1.0.tar.gz", contriburl = "http://r-forge.r-project.org/src/contrib/", type="source")
l6 <- read.dta("~/teach/935_2009/lecture6.dta")
l6 <- read.dta("http://www.quantoid.net/lecture6.dta")
library(nnet)
mod <- multinom(sd ~ cwarcow + iwarcow + milcontr + logpop + poly(vascale, 2), data=l6)
mod <- multinom(sd ~ cwarcow + iwarcow + milcontr + logpop + poly(vanadd, 2), data=l6)
Anova(mod)_
Anova(mod)
library(car)
Anova(mod)
l6$vascale <- scale(l6$vanadd)
l6$vascale2 <- l6$vascale^2
mod <- multinom(sd ~ cwarcow + iwarcow + milcontr + logpop + vascale + vascale2, data=l6)
Anova(mod0
)
Anova(mod)
coef(mod)
library(car)
linearHypothesis(mod, "3:cwarcow = 2:cwarcow
linearHypothesis(mod, "3:cwarcow = 2:cwarcow")
sum.multinom <- function(obj){#
smulti <- summary(obj)#
multi.t <- smulti$coefficients/smulti$standard.errors#
multi.p <- pt(abs(multi.t), #
  nrow(obj$fitted.values)-obj$edf, #
  lower.tail=F)#
b <- round(smulti$coefficients, 3)#
b[which(multi.p > .05, arr.ind=T)] <- ""#
noquote(b)#
}
sum.multinom(mod)
sum.multinom <- function(obj){#
smulti <- summary(obj)#
multi.t <- smulti$coefficients/smulti$standard.errors#
multi.p <- pnorm(abs(multi.t), lower.tail=F)#
b <- round(smulti$coefficients, 3)#
b[which(multi.p > .05, arr.ind=T)] <- ""#
noquote(b)#
}
sum.multinom(mod)
sum.multinom <- function(obj, pval){#
smulti <- summary(obj)#
multi.t <- smulti$coefficients/smulti$standard.errors#
multi.p <- pnorm(abs(multi.t), lower.tail=F)#
b <- round(smulti$coefficients, 3)#
b[which(multi.p > pval, arr.ind=T)] <- ""#
noquote(b)#
}
sum.multinom(mod, pval = .05)
sum.multinom(mod, pval = .01)
sum.multinom(mod, pval = .001)
sum.multinom(mod, pval = .000001)
X <- model.matrix(as.formula("~ cwarcow + iwarcow + logpop + logpcgnp + vascale + vascale2"), data=dat)
library(foreign)#
library(MASS)#
library(nnet)#
dat <- read.dta("~/teach/935_2009/lecture6.dta")#
dat$sd.fac <- factor(dat$sd, levels=1:5)#
dat$vanadd2 <- dat$vanadd^2#
dat$vascale <- scale(dat$vanadd)#
dat$vascale2 <- dat$vascale^2#
#
multi.mod <- multinom(sd.fac ~ cwarcow + iwarcow + logpop + logpcgnp + vascale + vascale2, data=dat)#
X <- model.matrix(as.formula("~ cwarcow + iwarcow + logpop + logpcgnp + vascale + vascale2"), data=dat)
X
apply(X, 2, median)
meds <- apply(X, 2, median)[-1]#
meds["vascale2"]
meds["vascale2"] <- meds["vascale"]^2
meds
mm.eff <- allEffects(multi.mod, given.values=meds)
mm.eff
mm.eff <- allEffects(multi.mod, given.values=meds, xlevels=list(cwarcow = c(0,1), iwarcow= c(0,1)))
mm.eff
mm.eff$prob
names(mm.eff)
mm.eff$cwarcow
mm.eff$cwarcow$prob
lapply(mm.eff, prob)
lapply(mm.eff, function(x)x$prob)
multi.mod <- multinom(sd.fac ~ cwarcow + iwarcow + logpop + logpcgnp + poly(vanadd, 2), data=dat)#
X <- model.matrix(as.formula("~ cwarcow + iwarcow + logpop + logpcgnp + poly(vanadd, 2)"), data=dat)#
meds <- apply(X, 2, median)[-1]#
meds["vascale2"] <- meds["vascale"]^2#
library(effects)#
mm.eff <- allEffects(multi.mod, given.values=meds, xlevels=list(cwarcow = c(0,1), iwarcow= c(0,1)))
lapply(mm.eff, function(x)x$prob)
plot(mm.eff, "poly(vanadd, 2)")
plot(mm.eff, "poly(vanadd, 2)", rug=F)
plot(mm.eff, "poly(vanadd, 2)", rug=F, style="stacked")
mm.eff$cwarcow
mm.eff$cwarcow$lower.prob
library(foreign)#
library(MASS)#
library(nnet)#
dat <- read.dta("http://www.quantoid.net/lecture6.dta")#
dat$sd.fac <- factor(dat$sd, levels=1:5)#
dat$vanadd2 <- dat$vanadd^2#
dat$vascale <- scale(dat$vanadd)#
dat$vascale2 <- dat$vascale^2#
#
multi.mod <- multinom(sd.fac ~ cwarcow + iwarcow + logpop + logpcgnp + poly(vanadd, 2), data=dat)#
X <- model.matrix(as.formula("~ cwarcow + iwarcow + logpop + logpcgnp + poly(vanadd, 2)"), data=dat)#
meds <- apply(X, 2, median)[-1]#
meds["vascale2"] <- meds["vascale"]^2#
library(effects)#
mm.eff <- effect("poly(vanadd, 2)", default.levels = 100, multi.mod, given.values=meds)
plot(mm.eff, rescale.axis=F, rug=F)
update(plot(mm.eff, rescale.axis=F, rug=F), layout =c(2,3))
update(plot(mm.eff, rescale.axis=F, rug=F), layout =c(2,3), as.table=T)
library(MNP)
install.packages("MNP")
library(MNP)
help(MNP)
library(car)#
Anova(multi.mod)
linearHypothesis(multi.mod, "1:cwarcow = 2:cwarcow")
multi.mod
linearHypothesis(multi.mod, "1:cwarcow == 2:cwarcow")
coef(multi.mod)
names(coef(mod))
mod$coef
multi.mod$coef
colnames(vcov(multi.mod))
linearHypothesis(multi.mod, "2:cwarcow = 3:cwarcow")
linearHypothesis(multi.mod, '"2:cwarcow = 3:cwarcow", "3:cwarcow = 4:cwarcow"')
linearHypothesis(multi.mod, '"2:cwarcow = 3:cwarcow"; "3:cwarcow = 4:cwarcow"')
help(linearHypothesis)
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow", "3:cwarcow = 4:cwarcow"))
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow", "3:cwarcow = 4:cwarcow", "4:cwarcow = 5:cwarcow"))
multi.mod <- multinom(sd.fac ~ cwarcow + iwarcow + logpop + logpcgnp + vascale + vascale2, data=dat, trace=F)#
#
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow", "3:cwarcow = 4:cwarcow", "4:cwarcow = 5:cwarcow"))
multi.mod <- multinom(sd.fac ~ cwarcow + iwarcow + logpop + logpcgnp + milcontr + vascale + vascale2, data=dat, trace=F)#
#
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow", "3:cwarcow = 4:cwarcow", "4:cwarcow = 5:cwarcow"))
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow", "3:cwarcow = 4:cwarcow", "4:cwarcow = 5:cwarcow, 5:cwarcow = 0"))
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow", "3:cwarcow = 4:cwarcow", "4:cwarcow = 5:cwarcow", "5:cwarcow = 0"))
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow"))#
linearHypothesis(multi.mod, c("2:cwarcow = 3:cwarcow", "3:cwarcow = 0"))
options(useFancyQuotes=F)
fitstat <- function(mod){#
	mod <- update(mod, x=T, y=T)#
	y <- mod$y#
	null.mod <- update(mod, ".~1")#
	b <- mod$coef[-1]#
	var.ystar <- t(b) %*% var(model.matrix(mod)[,-1]) %*% b#
	G <- -2*(logLik(null.mod) - logLik(mod))#
	res.col1 <- c(logLik(null.mod), deviance(mod), NA, #
		1-(logLik(mod)/logLik(null.mod)), #
		1-(exp(logLik(null.mod))/exp(logLik(mod)))^(2/length(mod$residuals)), #
		var.ystar / (var.ystar + switch(mod$family[[2]], logit = pi^2/3, probit=1)), #
		mean(mod$y == as.numeric(fitted(mod) > .5)), stats:::BIC(mod))#
	res.col2 <- c(logLik(mod), G, pchisq(G, 8, lower.tail=F), #
		1-((logLik(mod)-mod$rank)/logLik(null.mod)), #
		res.col1[5]/(1-(exp(logLik(null.mod))^(2/length(mod[["residuals"]])))), #
		1-(sum((y-fitted(mod))^2)/sum((y-mean(y))^2)), #
		(sum(mod$y == as.numeric(fitted(mod) > .5)) - #
			max(table(y)))/(length(mod$residuals) - max(table(y))), #
		stats:::AIC(mod))#
	res.vec <- c(res.col1, res.col2)[-3]#
	res.col1 <- sprintf("%3.3f", res.col1)#
	res.col1[3] <- ""#
	res.df <- data.frame(#
	Names1 = c("Log-Lik Intercept Only:", paste("D(", mod$df.residual, "):", sep=""), #
		" ", "McFadden's R2:", "ML (Cox-Snell) R2:", "McKelvey & Zavoina R2:", #
		"Count R2:", "BIC:"), #
	vals1 = res.col1, #
	Names2 = c("Log-Lik Full Model:", paste("LR(", mod$rank-1, "):", sep=""), #
		"Prob > LR:", "McFadden's Adk R2:", "Cragg-Uhler (Nagelkerke) R2:", #
		"Efron's R2:", "Adj Count R2:", "AIC:"), #
	vals2 = sprintf("%3.3f", res.col2))#
	print(res.df, row.names=F)#
	names(res.vec) <- c(as.character(res.df[,1])[-3], as.character(res.df[,2]))#
	invisible(res.vec)#
#
}#
#
fitstat(mod)
fitsta(multi.mod)
fitstat(multi.mod)
AIC(multi.mod)#
BIC(multi.mod)#
logLik(multi.mod)
source("http://www.quantoid.net/cat_pre.R")
catpre
catpre(multi.mod)
pchisq(-120
citation()
library(smacof)
citation(smacof)
citation("smacof")
library(bsmds)
args(bsmds)
citation("MASS")
los.dist <-#
function(x, expo=3, converge.criterion=1){#
if(!(is.matrix(x)))x <- as.matrix(x)#
### Make cumulative sum function for some fixed number (k) of observations#
csk <- function(x, k){#
	s <- NULL#
	for(j in k:length(x)){#
		s <- c(s, sum(x[j:(j-(k-1))]))#
	}#
	c(rep(NA, k), s)#
}#
### Make function to find the number of observations (up to some constant, k) after element j that are bigger than #
### the jth element. #
nalk <- function(x, k){#
	s <- NULL#
	for(j in 1:(length(x)-(k+1))){#
		s <- c(s, sum(x[j] > x[(j+1):(j+k+1)]))#
	}#
	c(s, rep(NA, (length(x)-length(s))))#
}#
#
combs <- t(combn(ncol(x),2))#
S.star <- x[,combs[,1]] + x[,combs[,2]]#
D.star <- abs(x[,combs[,1]] - x[,combs[,2]])#
S <- apply(S.star, 2, function(x)x[order(x)])#
D <- apply(D.star, 2, function(x)x[order(x, decreasing=TRUE)])#
B <- S+D#
B.hat <- apply(B, 2, cumsum)#
nr <- round(nrow(x)/150)#
#
if(converge.criterion == 1){#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x))))-1)/(ncol(B.hat)-1)#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- DIS*DENS^expo#
la <- length(ADEQ)#
DIFFA <- ADEQ[2:la]-ADEQ[1:(la-1)]#
min.converge <- min(which(csk(sign(DIFFA), ifelse(nr < 4, 4, nr)) == -5))#
row.bhat <- which.max(ADEQ[1:min.converge])#
if(row.bhat > round(nrow(x)/25)){#
	cat("Model did not converge under criterion 1\nMaximum adequacy occurred at row ", row.bhat, " which is greater than the suggested cutoff of ", round(nrow(x)/25), "\n", sep="")#
} else{#
	cat("Model converged under criterion 1\nMaximum adequacy occured at row ", row.bhat, "\n", sep="")#
}#
conv <- ifelse(row.bhat > round(nrow(x)/25), 0, 1)#
}#
#
if(converge.criterion == 2){#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
row.bhat <- which.max(DIS[1:round(nrow(x)/40)])#
cat("Model converged under criterion 2\nMaximum Discrimination at row ", row.bhat, "\n", sep="")#
conv <- 1#
}#
#
if(converge.criterion == 3){#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
ADEQ[1] <- 0#
MAXADEQ <- 1#
for(w in 2:length(ADEQ)){#
	MAXADEQ <- c(MAXADEQ, prod(as.numeric(ADEQ[w] > ADEQ[1:(w-1)])))#
}#
cc3.1 <- which(nalk(ADEQ, nr) == nr)#
cc3.2 <- which(ADEQ > DENS & MAXADEQ == 1)#
conv <- 0#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] < cc3.2[1]){#
	conv <- 1#
	}#
}#
if(length(cc3.1) > 0 & length(cc3.2) == 0){#
	conv <- 1#
}#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] > cc3.2[1]){#
	conv <- 0#
	}#
}#
if(length(cc3.1) == 0){#
	conv <- 0#
}#
row.bhat <- cc3.1[1]#
if(conv == 0){#
	cat("Model did not converge under criterion 3\n", sep="")#
} else{#
	cat("Model converged under criterion 3\nMaximum Adequacy at row ", row.bhat, "\n", sep="")#
}#
}#
dissim.x <- matrix(0, ncol=ncol(x), nrow=ncol(x))#
dissim.x[combs] <- rank(B.hat[row.bhat, ])#
dissim.x[combs[,2:1]] <- dissim.x[combs]#
colnames(dissim.x) <- rownames(dissim.x) <- colnames(x)#
ret <- list(DISCRIM = DIS, DENS = DENS, ADEQ=ADEQ, B.hat=B.hat, S=S, D=D, row.bhat=row.bhat, DISSIM=dissim.x, #
	min.converge = min.converge, converge=conv)#
class(ret) <- "los"#
invisible(ret)#
}
setwd("~/proj/mds/bsmds/data/")
load("thermometers.rda")
load("thermometers2004.rda")
los.dist(thermometers2004, converge.criterion=1)
los.dist(thermometers2004, converge.criterion=1)$DISSIM
los.dist(thermometers2004, converge.criterion=2)$DISSIM
los.dist(thermometers2004, converge.criterion=3)$DISSIM
is.null(dart)
exists(dart)
los.dist <-#
function(x, expo=3, converge.criterion=1){#
if(!(is.matrix(x)))x <- as.matrix(x)#
### Make cumulative sum function for some fixed number (k) of observations#
csk <- function(x, k){#
	s <- NULL#
	for(j in k:length(x)){#
		s <- c(s, sum(x[j:(j-(k-1))]))#
	}#
	c(rep(NA, k), s)#
}#
### Make function to find the number of observations (up to some constant, k) after element j that are bigger than #
### the jth element. #
nalk <- function(x, k){#
	s <- NULL#
	for(j in 1:(length(x)-(k+1))){#
		s <- c(s, sum(x[j] > x[(j+1):(j+k+1)]))#
	}#
	c(s, rep(NA, (length(x)-length(s))))#
}#
#
combs <- t(combn(ncol(x),2))#
S.star <- x[,combs[,1]] + x[,combs[,2]]#
D.star <- abs(x[,combs[,1]] - x[,combs[,2]])#
S <- apply(S.star, 2, function(x)x[order(x)])#
D <- apply(D.star, 2, function(x)x[order(x, decreasing=TRUE)])#
B <- S+D#
B.hat <- apply(B, 2, cumsum)#
nr <- round(nrow(x)/150)#
#
if(converge.criterion == 1){#
min.converge <- NULL#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x))))-1)/(ncol(B.hat)-1)#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- DIS*DENS^expo#
la <- length(ADEQ)#
DIFFA <- ADEQ[2:la]-ADEQ[1:(la-1)]#
min.converge <- min(which(csk(sign(DIFFA), ifelse(nr < 4, 4, nr)) == -5))#
row.bhat <- which.max(ADEQ[1:min.converge])#
if(row.bhat > round(nrow(x)/25)){#
	cat("Model did not converge under criterion 1\nMaximum adequacy occurred at row ", row.bhat, " which is greater than the suggested cutoff of ", round(nrow(x)/25), "\n", sep="")#
} else{#
	cat("Model converged under criterion 1\nMaximum adequacy occured at row ", row.bhat, "\n", sep="")#
}#
conv <- ifelse(row.bhat > round(nrow(x)/25), 0, 1)#
}#
#
if(converge.criterion == 2){#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
row.bhat <- which.max(DIS[1:round(nrow(x)/40)])#
cat("Model converged under criterion 2\nMaximum Discrimination at row ", row.bhat, "\n", sep="")#
conv <- 1#
}#
#
if(converge.criterion == 3){#
min.converge <- NULL#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
ADEQ[1] <- 0#
MAXADEQ <- 1#
for(w in 2:length(ADEQ)){#
	MAXADEQ <- c(MAXADEQ, prod(as.numeric(ADEQ[w] > ADEQ[1:(w-1)])))#
}#
cc3.1 <- which(nalk(ADEQ, nr) == nr)#
cc3.2 <- which(ADEQ > DENS & MAXADEQ == 1)#
conv <- 0#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] < cc3.2[1]){#
	conv <- 1#
	}#
}#
if(length(cc3.1) > 0 & length(cc3.2) == 0){#
	conv <- 1#
}#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] > cc3.2[1]){#
	conv <- 0#
	}#
}#
if(length(cc3.1) == 0){#
	conv <- 0#
}#
row.bhat <- cc3.1[1]#
if(conv == 0){#
	cat("Model did not converge under criterion 3\n", sep="")#
} else{#
	cat("Model converged under criterion 3\nMaximum Adequacy at row ", row.bhat, "\n", sep="")#
}#
}#
dissim.x <- matrix(0, ncol=ncol(x), nrow=ncol(x))#
dissim.x[combs] <- rank(B.hat[row.bhat, ])#
dissim.x[combs[,2:1]] <- dissim.x[combs]#
colnames(dissim.x) <- rownames(dissim.x) <- colnames(x)#
ret <- list(DISCRIM = DIS, DENS = DENS, ADEQ=ADEQ, B.hat=B.hat, S=S, D=D, row.bhat=row.bhat, DISSIM=dissim.x, #
	min.converge = min.converge, converge=conv)#
class(ret) <- "los"#
invisible(ret)#
}
los.dist(thermometers2004, converge.criterion=2)$DISSIM
los.dist <-#
function(x, expo=3, converge.criterion=1){#
if(!(is.matrix(x)))x <- as.matrix(x)#
### Make cumulative sum function for some fixed number (k) of observations#
csk <- function(x, k){#
	s <- NULL#
	for(j in k:length(x)){#
		s <- c(s, sum(x[j:(j-(k-1))]))#
	}#
	c(rep(NA, k), s)#
}#
### Make function to find the number of observations (up to some constant, k) after element j that are bigger than #
### the jth element. #
nalk <- function(x, k){#
	s <- NULL#
	for(j in 1:(length(x)-(k+1))){#
		s <- c(s, sum(x[j] > x[(j+1):(j+k+1)]))#
	}#
	c(s, rep(NA, (length(x)-length(s))))#
}#
#
combs <- t(combn(ncol(x),2))#
S.star <- x[,combs[,1]] + x[,combs[,2]]#
D.star <- abs(x[,combs[,1]] - x[,combs[,2]])#
S <- apply(S.star, 2, function(x)x[order(x)])#
D <- apply(D.star, 2, function(x)x[order(x, decreasing=TRUE)])#
B <- S+D#
B.hat <- apply(B, 2, cumsum)#
nr <- round(nrow(x)/150)#
#
if(converge.criterion == 1){#
min.converge <- NULL#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x))))-1)/(ncol(B.hat)-1)#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- DIS*DENS^expo#
la <- length(ADEQ)#
DIFFA <- ADEQ[2:la]-ADEQ[1:(la-1)]#
min.converge <- min(which(csk(sign(DIFFA), ifelse(nr < 4, 4, nr)) == -5))#
row.bhat <- which.max(ADEQ[1:min.converge])#
if(row.bhat > round(nrow(x)/25)){#
	cat("Model did not converge under criterion 1\nMaximum adequacy occurred at row ", row.bhat, " which is greater than the suggested cutoff of ", round(nrow(x)/25), "\n", sep="")#
} else{#
	cat("Model converged under criterion 1\nMaximum adequacy occured at row ", row.bhat, "\n", sep="")#
}#
conv <- ifelse(row.bhat > round(nrow(x)/25), 0, 1)#
}#
#
if(converge.criterion == 2){#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
row.bhat <- which.max(DIS[1:round(nrow(x)/40)])#
cat("Model converged under criterion 2\nMaximum Discrimination at row ", row.bhat, "\n", sep="")#
conv <- 1#
}#
#
if(converge.criterion == 3){#
min.converge <- NULL#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
ADEQ[1] <- 0#
MAXADEQ <- 1#
for(w in 2:length(ADEQ)){#
	MAXADEQ <- c(MAXADEQ, prod(as.numeric(ADEQ[w] > ADEQ[1:(w-1)])))#
}#
cc3.1 <- which(nalk(ADEQ, nr) == nr)#
cc3.2 <- which(ADEQ > DENS & MAXADEQ == 1)#
conv <- 0#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] < cc3.2[1]){#
	conv <- 1#
	}#
}#
if(length(cc3.1) > 0 & length(cc3.2) == 0){#
	conv <- 1#
}#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] > cc3.2[1]){#
	conv <- 0#
	}#
}#
if(length(cc3.1) == 0){#
	conv <- 0#
}#
row.bhat <- cc3.1[1]#
if(conv == 0){#
	cat("Model did not converge under criterion 3\n", sep="")#
} else{#
	cat("Model converged under criterion 3\nMaximum Adequacy at row ", row.bhat, "\n", sep="")#
}#
}#
dissim.x <- matrix(0, ncol=ncol(x), nrow=ncol(x))#
dissim.x[combs] <- rank(B.hat[row.bhat, ])#
dissim.x[combs[,2:1]] <- dissim.x[combs]#
colnames(dissim.x) <- rownames(dissim.x) <- colnames(x)#
ret <- list(DISCRIM = DIS, DENS = DENS, ADEQ=ADEQ, B.hat=B.hat, S=S, D=D, row.bhat=row.bhat, DISSIM=dissim.x, #
	min.converge = min.converge, converge=conv)#
class(ret) <- "los"#
invisible(ret)#
}
los.dist(thermometers2004, converge.criterion=2)$DISSIM
los.dist <-#
function(x, expo=3, converge.criterion=1){#
if(!(is.matrix(x)))x <- as.matrix(x)#
### Make cumulative sum function for some fixed number (k) of observations#
csk <- function(x, k){#
	s <- NULL#
	for(j in k:length(x)){#
		s <- c(s, sum(x[j:(j-(k-1))]))#
	}#
	c(rep(NA, k), s)#
}#
### Make function to find the number of observations (up to some constant, k) after element j that are bigger than #
### the jth element. #
nalk <- function(x, k){#
	s <- NULL#
	for(j in 1:(length(x)-(k+1))){#
		s <- c(s, sum(x[j] > x[(j+1):(j+k+1)]))#
	}#
	c(s, rep(NA, (length(x)-length(s))))#
}#
#
combs <- t(combn(ncol(x),2))#
S.star <- x[,combs[,1]] + x[,combs[,2]]#
D.star <- abs(x[,combs[,1]] - x[,combs[,2]])#
S <- apply(S.star, 2, function(x)x[order(x)])#
D <- apply(D.star, 2, function(x)x[order(x, decreasing=TRUE)])#
B <- S+D#
B.hat <- apply(B, 2, cumsum)#
nr <- round(nrow(x)/150)#
#
if(converge.criterion == 1){#
min.converge <- NULL#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x))))-1)/(ncol(B.hat)-1)#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- DIS*DENS^expo#
la <- length(ADEQ)#
DIFFA <- ADEQ[2:la]-ADEQ[1:(la-1)]#
min.converge <- min(which(csk(sign(DIFFA), ifelse(nr < 4, 4, nr)) == -5))#
row.bhat <- which.max(ADEQ[1:min.converge])#
if(row.bhat > round(nrow(x)/25)){#
	cat("Model did not converge under criterion 1\nMaximum adequacy occurred at row ", row.bhat, " which is greater than the suggested cutoff of ", round(nrow(x)/25), "\n", sep="")#
} else{#
	cat("Model converged under criterion 1\nMaximum adequacy occured at row ", row.bhat, "\n", sep="")#
}#
conv <- ifelse(row.bhat > round(nrow(x)/25), 0, 1)#
}#
#
if(converge.criterion == 2){#
min.converge <- NULL#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
row.bhat <- which.max(DIS[1:round(nrow(x)/40)])#
cat("Model converged under criterion 2\nMaximum Discrimination at row ", row.bhat, "\n", sep="")#
conv <- 1#
}#
#
if(converge.criterion == 3){#
min.converge <- NULL#
RHO <- c(NA, diag(cor(apply(B.hat[2:nrow(B.hat), ], 1, rank), apply(B.hat[1:(nrow(B.hat)-1), ], 1, rank))))#
DIS <- (apply(B.hat, 1, function(x)length(unique(rank(x)))))/(ncol(B.hat))#
DENS <- (nrow(x)-(1:nrow(B.hat)))/(nrow(x)-1)#
ADEQ <- RHO*DIS*DENS#
ADEQ[1] <- 0#
MAXADEQ <- 1#
for(w in 2:length(ADEQ)){#
	MAXADEQ <- c(MAXADEQ, prod(as.numeric(ADEQ[w] > ADEQ[1:(w-1)])))#
}#
cc3.1 <- which(nalk(ADEQ, nr) == nr)#
cc3.2 <- which(ADEQ > DENS & MAXADEQ == 1)#
conv <- 0#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] < cc3.2[1]){#
	conv <- 1#
	}#
}#
if(length(cc3.1) > 0 & length(cc3.2) == 0){#
	conv <- 1#
}#
if(length(cc3.1) > 0 & length(cc3.2) > 0){#
	if(cc3.1[1] > cc3.2[1]){#
	conv <- 0#
	}#
}#
if(length(cc3.1) == 0){#
	conv <- 0#
}#
row.bhat <- cc3.1[1]#
if(conv == 0){#
	cat("Model did not converge under criterion 3\n", sep="")#
} else{#
	cat("Model converged under criterion 3\nMaximum Adequacy at row ", row.bhat, "\n", sep="")#
}#
}#
dissim.x <- matrix(0, ncol=ncol(x), nrow=ncol(x))#
dissim.x[combs] <- rank(B.hat[row.bhat, ])#
dissim.x[combs[,2:1]] <- dissim.x[combs]#
colnames(dissim.x) <- rownames(dissim.x) <- colnames(x)#
ret <- list(DISCRIM = DIS, DENS = DENS, ADEQ=ADEQ, B.hat=B.hat, S=S, D=D, row.bhat=row.bhat, DISSIM=dissim.x, #
	min.converge = min.converge, converge=conv)#
class(ret) <- "los"#
invisible(ret)#
}
los.dist(thermometers2004, converge.criterion=2)$DISSIM
los.dist(thermometers2004, converge.criterion=3)$DISSIM
citation(boot)
citation("boot")
library(bsmds)#
data(thermometers2004)#
out <- bsmds(thermometers2004, dist.fun = "los", dist.arg = "x", dist.data.args = list(converge.criterion=1), #
    R = 50, rm.degen = TRUE, km.thresh = 5)
citation(ICS)
citation("ICS")
library(ICS)
?mvnorm.kur.test
